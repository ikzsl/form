{"version":3,"sources":["data/data.js","components/form/form3.js","components/app/app.js","index.js"],"names":["axios","defaults","baseURL","getData","body","post","SubmitForm","useState","loading","setLoading","userCreatingErrorMessage","setUserCreatingErrorMessage","successMessage","setSuccessMessage","netErrorMessage","setNetErrorMessage","validationSchema","Yup","shape","name","max","required","password","matches","passwordConfirmation","oneOf","email","website","url","age","typeError","min","skills","acceptTerms","nullable","onSubmit","values","a","resetForm","filteredSkills","filter","Boolean","res","data","errorMessage","isAxiosError","response","initialValues","className","onChange","htmlFor","Item","id","placeholder","size","suffix","UserOutlined","Password","MailOutlined","LinkOutlined","rowKey","row","pagination","columns","title","key","render","text","record","i","ThunderboltOutlined","onPressEnter","evt","preventDefault","document","getElementById","click","autoFocus","createNewRow","type","shouldUpdate","disabled","App","ReactDOM"],"mappings":"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","file":"static/js/main.da905c38.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3012';\n// axios.defaults.timeout = 2000;\n\nconst getData = (body) => axios.post('/sign-up', body);\n\nexport default getData;\n","// on hooks\nimport React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Table,\n  AddRowButton,\n  Checkbox,\n  SubmitButton,\n  ResetButton,\n} from 'formik-antd';\nimport {\n  MailOutlined, UserOutlined, LinkOutlined, ThunderboltOutlined,\n} from '@ant-design/icons';\n\nimport getData from '../../data/data';\nimport './form.scss';\n\nconst SubmitForm = () => {\n  const [loading, setLoading] = useState(false);\n  const [userCreatingErrorMessage, setUserCreatingErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(false);\n  const [netErrorMessage, setNetErrorMessage] = useState(false);\n\n  const initialValues = {\n    name: '',\n    password: '',\n    passwordConfirmation: '',\n    email: '',\n    website: '',\n    age: null,\n    skills: [''],\n    acceptTerms: false,\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().max(50, 'Слишком длинно - не более 50 символов').required('Имя обязательно'),\n    password: Yup.string()\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,40}$/,\n        'от 8 до 40 символов, как минимум одна цифра и одна заглавная буква',\n      )\n      .required('Пароль нужен'),\n    passwordConfirmation: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Надо точь-в-точь как пароль')\n      .required('Обязательно'),\n    email: Yup.string().email('Неправильная почта').required('Почту, пожалуйста'),\n    website: Yup.string().url('Неверный адрес сайта'),\n    age: Yup.number()\n      .typeError('Должно быть число')\n      .min(18, 'Юнцам тут не место')\n      .max(65, 'Займись лучше внуками, дедуля')\n      .required('Сколько тебе лет?'),\n    skills: Yup.array(),\n    acceptTerms: Yup.bool()\n      .oneOf([true], 'Нужно согласие')\n      .required('Обязательно')\n      .nullable('null'),\n  });\n\n  const onSubmit = async (values, { resetForm }) => {\n    const filteredSkills = values.skills.filter(Boolean);\n\n    setLoading(true);\n\n    const body = {\n      ...values,\n      skills: filteredSkills,\n    };\n\n    try {\n      const res = await getData(body);\n      const { data } = res;\n\n      setUserCreatingErrorMessage(null);\n      setSuccessMessage(data);\n      setNetErrorMessage(null);\n      setLoading(false);\n\n      resetForm({\n        errorMessage: null,\n      });\n    } catch (err) {\n      if (err.isAxiosError) {\n        setNetErrorMessage('Сервер не отвечает');\n        setLoading(false);\n      }\n\n      setUserCreatingErrorMessage(err.response.data);\n      setSuccessMessage(null);\n      setNetErrorMessage(null);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n      <Form\n        className=\"form\"\n        onChange={() => {\n          setSuccessMessage(null);\n        }}\n      >\n        <div>\n          <label htmlFor=\"name\">\n            Имя\n            <span className=\"required-star\"> *</span>\n          </label>\n          <Form.Item name=\"name\">\n            <Input\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Иван\"\n              size=\"large\"\n              suffix={<UserOutlined />}\n            />\n          </Form.Item>\n        </div>\n        <div>\n          <label htmlFor=\"pwd\">\n            Пароль\n            <span className=\"required-star\"> *</span>\n          </label>\n          <Form.Item name=\"password\">\n            <Input.Password\n              id=\"pwd\"\n              name=\"password\"\n              placeholder=\"bu7UYvjl2nkj9WNshd\"\n              size=\"large\"\n            />\n          </Form.Item>\n        </div>\n        <div>\n          <label htmlFor=\"repwd\">\n            Повторите пароль\n            <span className=\"required-star\"> *</span>\n          </label>\n          <Form.Item name=\"passwordConfirmation\">\n            <Input.Password\n              id=\"repwd\"\n              name=\"passwordConfirmation\"\n              placeholder=\"bu7UYvjl2nkj9WNshd\"\n              size=\"large\"\n            />\n          </Form.Item>\n        </div>\n        <div>\n          <label htmlFor=\"email\">\n            Электропочта\n            <span className=\"required-star\"> *</span>\n          </label>\n          <span className=\"error\">{userCreatingErrorMessage}</span>\n          <Form.Item name=\"email\">\n            <Input\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"ivan@mail.ru\"\n              size=\"large\"\n              onChange={() => {\n                setUserCreatingErrorMessage(null);\n              }}\n              suffix={<MailOutlined />}\n            />\n          </Form.Item>\n        </div>\n        <div>\n          <label htmlFor=\"site\">Ваш сайт </label>\n          <Form.Item name=\"website\">\n            <Input\n              id=\"site\"\n              name=\"website\"\n              placeholder=\"http://www.ivan.ru\"\n              size=\"large\"\n              suffix={<LinkOutlined />}\n            />\n          </Form.Item>\n        </div>\n        <div>\n          <label htmlFor=\"age\">\n            Возраст\n            <span className=\"required-star\"> *</span>\n          </label>\n          <Form.Item name=\"age\">\n            <InputNumber id=\"age\" name=\"age\" placeholder=\"27\" size=\"large\" />\n          </Form.Item>\n        </div>\n\n        <div>\n          <Table\n            name=\"skills\"\n            rowKey={(row) => `${row.id}`}\n            size=\"small\"\n            pagination={false}\n            columns={[\n              {\n                title: 'Cуперспособности',\n                key: 'name',\n                render: (text, record, i) => (\n                  <Input\n                    name={`skills[${i}]`}\n                    placeholder=\"Телепатия\"\n                    size=\"large\"\n                    suffix={<ThunderboltOutlined />}\n                    onPressEnter={(evt) => {\n                      evt.preventDefault();\n                      document.getElementById('addSkillButton').click();\n                    }}\n                    autoFocus\n                  />\n                ),\n              },\n            ]}\n          />\n\n          <AddRowButton\n            name=\"skills\"\n            createNewRow={(text) => text || ''}\n            size=\"large\"\n            type=\"primary\"\n            className=\"skillsButton\"\n            id=\"addSkillButton\"\n          >\n            Добавить суперспособность\n          </AddRowButton>\n        </div>\n\n        <div>\n          <Form.Item name=\"acceptTerms\" shouldUpdate={false}>\n            <Checkbox id=\"terms\" name=\"acceptTerms\" />\n            <label htmlFor=\"terms\">\n              {' '}\n              Согласен с условиями\n              <span className=\"required-star\"> *</span>\n            </label>\n          </Form.Item>\n        </div>\n\n        <div className=\"formButtonsContainer\">\n          <SubmitButton loading={loading} disabled={false} size=\"large\" className=\"button\">\n            Зарегистрироваться\n          </SubmitButton>\n          <ResetButton size=\"large\" className=\"button\">\n            Очистить форму\n          </ResetButton>\n        </div>\n        <span className=\"success\">{successMessage}</span>\n        <span className=\"error\">{netErrorMessage}</span>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default SubmitForm;\n","import React from 'react';\nimport Form from '../form/form3';\n\nimport './app.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <h2>Форма регистрации</h2>\n    <Form />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}