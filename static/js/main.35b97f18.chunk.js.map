{"version":3,"sources":["components/form/form.js","components/app/app.js","index.js"],"names":["submitForm","state","loading","errorMessage","successMessage","initialValues","name","password","passwordConfirmation","email","website","skills","acceptTerms","validationSchema","Yup","max","required","matches","oneOf","url","age","min","onSubmit","values","a","resetForm","filteredSkills","filter","Boolean","setState","axios","post","res","data","response","handleClearCloneError","handleClearSuccess","this","className","onChange","htmlFor","Item","id","placeholder","size","Password","rowKey","row","pagination","columns","title","key","render","text","record","i","createNewRow","type","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.35b97f18.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Table,\n  AddRowButton,\n  Checkbox,\n  SubmitButton,\n  ResetButton,\n} from 'formik-antd';\nimport './form.scss';\n\nclass submitForm extends React.Component {\n  state = {\n    loading: false,\n    errorMessage: null,\n    successMessage: null,\n  };\n\n  initialValues = {\n    name: '',\n    password: '',\n    passwordConfirmation: '',\n    email: '',\n    website: '',\n    // age: '',\n    skills: [''],\n    acceptTerms: false,\n  };\n\n  validationSchema = Yup.object({\n    name: Yup.string().max(50, 'Слишком длинно - не более 50 символов').required('Имя обязательно'),\n    password: Yup.string()\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,40}$/,\n        'от 8 до 40 символов, как минимум одна цифра и одна заглавная буква',\n      )\n      .required('Пароль нужен'),\n    passwordConfirmation: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Надо точь-в-точь как пароль')\n      .required('Обязательно'),\n    email: Yup.string().email('Неправильная почта').required('Почту, пожалуйста'),\n    website: Yup.string().url('Неверный адрес сайта'),\n    age: Yup.number()\n      .min(18, 'Юнцам тут не место')\n      .max(65, 'Займись лучше внуками, дедуля')\n      .required('Сколько тебе лет?'),\n    skills: Yup.array(),\n    acceptTerms: Yup.bool().oneOf([true], 'Нужно  твое согласие'),\n  });\n\n  onSubmit = async (values, { resetForm }) => {\n    const filteredSkills = values.skills.filter(Boolean);\n    this.setState({ loading: true });\n\n    try {\n      const res = await axios.post('http://localhost:3012/sign-up', {\n        ...values,\n        skills: filteredSkills,\n      });\n      const { data } = res;\n      this.setState({ errorMessage: null, successMessage: data, loading: false });\n      resetForm({\n        errorMessage: null,\n      });\n    } catch (err) {\n      this.setState({ errorMessage: err.response.data, successMessage: null, loading: false });\n    }\n  };\n\n  handleClearCloneError = () => {\n    this.setState({ errorMessage: null });\n  };\n\n  handleClearSuccess = () => {\n    this.setState({ successMessage: null });\n  };\n\n  render() {\n    const { successMessage, errorMessage, loading } = this.state;\n    return (\n      <Formik\n        initialValues={this.initialValues}\n        validationSchema={this.validationSchema}\n        onSubmit={this.onSubmit}\n      >\n        <Form className=\"form\" onChange={this.handleClearSuccess}>\n          <div>\n            <label htmlFor=\"name\">Имя</label>\n            <Form.Item name=\"name\">\n              <Input id=\"name\" name=\"name\" placeholder=\"Иван\" size=\"large\" />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"pwd\">Пароль </label>\n            <Form.Item name=\"password\">\n              <Input.Password\n                id=\"pwd\"\n                name=\"password\"\n                placeholder=\"bu7UYvjl2nkj9WNshd\"\n                size=\"large\"\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"repwd\">Повторите пароль</label>\n            <Form.Item name=\"passwordConfirmation\">\n              <Input.Password\n                id=\"repwd\"\n                name=\"passwordConfirmation\"\n                placeholder=\"bu7UYvjl2nkj9WNshd\"\n                size=\"large\"\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"email\">Электропочта </label>\n            <span className=\"error\">{errorMessage}</span>\n            <Form.Item name=\"email\">\n              <Input\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"ivan@mail.ru\"\n                size=\"large\"\n                onChange={this.handleClearCloneError}\n              />\n            </Form.Item>\n          </div>\n\n          <div>\n            <label htmlFor=\"site\">Ваш сайт </label>\n            <Form.Item name=\"website\">\n              <Input id=\"site\" name=\"website\" placeholder=\"http://www.ivan.ru\" size=\"large\" />\n            </Form.Item>\n          </div>\n\n          <div>\n            <label htmlFor=\"age\">Возраст </label>\n            <Form.Item name=\"age\">\n              <InputNumber id=\"age\" name=\"age\" placeholder=\"27\" size=\"large\" />\n            </Form.Item>\n          </div>\n\n          <div>\n            <Table\n              name=\"skills\"\n              rowKey={(row) => `${row.id}`}\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  title: 'Cуперспособности',\n                  key: 'name',\n                  render: (text, record, i) => (\n                    <Input name={`skills[${i}]`} placeholder=\"Телепатия\" size=\"large\" />\n                  ),\n                },\n              ]}\n            />\n            <AddRowButton\n              name=\"skills\"\n              createNewRow={(text) => text || ''}\n              size=\"large\"\n              type=\"primary\"\n              className=\"skillsButton\"\n            >\n              Добавить суперспособность\n            </AddRowButton>\n          </div>\n\n          <div>\n            <Form.Item name=\"acceptTerms\">\n              <Checkbox id=\"terms\" name=\"acceptTerms\" />\n              <label htmlFor=\"terms\"> Согласен с условиями </label>\n            </Form.Item>\n          </div>\n\n          <div className=\"formButtonsContainer\">\n            <SubmitButton loading={loading} size=\"large\" className=\"button\">\n              Зарегистрироваться\n            </SubmitButton>\n            <ResetButton size=\"large\" className=\"button\">\n              Очистить форму\n            </ResetButton>\n          </div>\n          <div className=\"success\">{successMessage}</div>\n        </Form>\n      </Formik>\n    );\n  }\n}\n\nexport default submitForm;\n","import React from 'react';\nimport Form from '../form/form';\n\nimport './app.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <h2>Форма регистрации</h2>\n    <Form />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}