{"version":3,"sources":["data/data.js","components/form/form.js","components/app/app.js","index.js"],"names":["axios","defaults","baseURL","getData","body","post","SubmitForm","props","state","loading","userCreatingErrorMessage","successMessage","netErrorMessage","initialValues","name","password","passwordConfirmation","email","website","age","skills","acceptTerms","validationSchema","Yup","max","required","matches","oneOf","url","typeError","min","onSubmit","values","a","resetForm","filteredSkills","filter","Boolean","setState","res","data","errorMessage","isAxiosError","response","handleClearCloneError","handleClearSuccess","handleClickButton","evt","preventDefault","document","getElementById","click","myRef","React","createRef","this","className","onChange","htmlFor","Item","id","placeholder","size","suffix","UserOutlined","Password","MailOutlined","LinkOutlined","rowKey","row","pagination","columns","title","key","render","text","record","i","ThunderboltOutlined","onPressEnter","autoFocus","createNewRow","type","disabled","Component","App","ReactDOM"],"mappings":"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","file":"static/js/main.5760f95d.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3012';\n// axios.defaults.timeout = 2000;\n\nconst getData = (body) => axios.post('/sign-up', body);\n\nexport default getData;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Table,\n  AddRowButton,\n  Checkbox,\n  SubmitButton,\n  ResetButton,\n} from 'formik-antd';\nimport {\n  MailOutlined, UserOutlined, LinkOutlined, ThunderboltOutlined,\n} from '@ant-design/icons';\n\nimport getData from '../../data/data';\nimport './form.scss';\n\nclass SubmitForm extends React.Component {\n  state = {\n    loading: false,\n    userCreatingErrorMessage: null,\n    successMessage: null,\n    netErrorMessage: null,\n  };\n\n  initialValues = {\n    name: '',\n    password: '',\n    passwordConfirmation: '',\n    email: '',\n    website: '',\n    age: null,\n    skills: [''],\n    acceptTerms: false,\n  };\n\n  validationSchema = Yup.object({\n    name: Yup.string().max(50, 'Слишком длинно - не более 50 символов').required('Имя обязательно'),\n    password: Yup.string()\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,40}$/,\n        'от 8 до 40 символов, как минимум одна цифра и одна заглавная буква',\n      )\n      .required('Пароль нужен'),\n    passwordConfirmation: Yup.string()\n      .oneOf([Yup.ref('password'), null], 'Надо точь-в-точь как пароль')\n      .required('Обязательно'),\n    email: Yup.string().email('Неправильная почта').required('Почту, пожалуйста'),\n    website: Yup.string().url('Неверный адрес сайта'),\n    age: Yup.number()\n      .typeError('Должно быть число')\n      .min(18, 'Юнцам тут не место')\n      .max(65, 'Займись лучше внуками, дедуля')\n      .required('Сколько тебе лет?'),\n    skills: Yup.array(),\n    acceptTerms: Yup.bool().oneOf([true], 'Нужно  твое согласие'),\n  });\n\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  onSubmit = async (values, { resetForm }) => {\n    const filteredSkills = values.skills.filter(Boolean);\n\n    this.setState({\n      loading: true,\n    });\n\n    const body = {\n      ...values,\n      skills: filteredSkills,\n    };\n\n    try {\n      const res = await getData(body);\n      const { data } = res;\n\n      this.setState({\n        userCreatingErrorMessage: null,\n        netErrorMessage: null,\n        successMessage: data,\n        loading: false,\n      });\n\n      resetForm({\n        errorMessage: null,\n      });\n    } catch (err) {\n      // console.log('error', Object.entries(err), err.isAxiosError);\n      if (err.isAxiosError) {\n        this.setState({\n          netErrorMessage: 'Сервер не отвечает',\n          loading: false,\n        });\n      }\n      this.setState({\n        userCreatingErrorMessage: err.response.data,\n        successMessage: null,\n        netErrorMessage: null,\n        loading: false,\n      });\n    }\n  };\n\n  handleClearCloneError = () => {\n    this.setState({ userCreatingErrorMessage: null });\n  };\n\n  handleClearSuccess = () => {\n    this.setState({ successMessage: null });\n  };\n\n  handleClickButton = (evt) => {\n    evt.preventDefault();\n    document.getElementById('addSkillButton').click();\n  };\n\n  render() {\n    const {\n      successMessage, userCreatingErrorMessage, netErrorMessage, loading,\n    } = this.state;\n\n    return (\n      <Formik\n        initialValues={this.initialValues}\n        validationSchema={this.validationSchema}\n        onSubmit={this.onSubmit}\n      >\n        <Form className=\"form\" onChange={this.handleClearSuccess}>\n          <div>\n            <label htmlFor=\"name\">\n              Имя\n              <span className=\"required-star\"> *</span>\n            </label>\n            <Form.Item name=\"name\">\n              <Input\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Иван\"\n                size=\"large\"\n                suffix={<UserOutlined />}\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"pwd\">\n              Пароль\n              <span className=\"required-star\"> *</span>\n            </label>\n            <Form.Item name=\"password\">\n              <Input.Password\n                id=\"pwd\"\n                name=\"password\"\n                placeholder=\"bu7UYvjl2nkj9WNshd\"\n                size=\"large\"\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"repwd\">\n              Повторите пароль\n              <span className=\"required-star\"> *</span>\n            </label>\n            <Form.Item name=\"passwordConfirmation\">\n              <Input.Password\n                id=\"repwd\"\n                name=\"passwordConfirmation\"\n                placeholder=\"bu7UYvjl2nkj9WNshd\"\n                size=\"large\"\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"email\">\n              Электропочта\n              <span className=\"required-star\"> *</span>\n            </label>\n            <span className=\"error\">{userCreatingErrorMessage}</span>\n            <Form.Item name=\"email\">\n              <Input\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"ivan@mail.ru\"\n                size=\"large\"\n                onChange={this.handleClearCloneError}\n                suffix={<MailOutlined />}\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"site\">Ваш сайт </label>\n            <Form.Item name=\"website\">\n              <Input\n                id=\"site\"\n                name=\"website\"\n                placeholder=\"http://www.ivan.ru\"\n                size=\"large\"\n                suffix={<LinkOutlined />}\n              />\n            </Form.Item>\n          </div>\n          <div>\n            <label htmlFor=\"age\">\n              Возраст\n              <span className=\"required-star\"> *</span>\n            </label>\n            <Form.Item name=\"age\">\n              <InputNumber id=\"age\" name=\"age\" placeholder=\"27\" size=\"large\" />\n            </Form.Item>\n          </div>\n\n          <div>\n            <Table\n              name=\"skills\"\n              rowKey={(row) => `${row.id}`}\n              size=\"small\"\n              pagination={false}\n              columns={[\n                {\n                  title: 'Cуперспособности',\n                  key: 'name',\n                  render: (text, record, i) => (\n                    <Input\n                      name={`skills[${i}]`}\n                      placeholder=\"Телепатия\"\n                      size=\"large\"\n                      suffix={<ThunderboltOutlined />}\n                      onPressEnter={this.handleClickButton}\n                      autoFocus\n                    />\n                  ),\n                },\n              ]}\n            />\n\n            <AddRowButton\n              name=\"skills\"\n              createNewRow={(text) => text || ''}\n              size=\"large\"\n              type=\"primary\"\n              className=\"skillsButton\"\n              id=\"addSkillButton\"\n            >\n              Добавить суперспособность\n            </AddRowButton>\n          </div>\n\n          <div>\n            <Form.Item name=\"acceptTerms\">\n              <Checkbox id=\"terms\" name=\"acceptTerms\" />\n              <label htmlFor=\"terms\">\n                {' '}\n                Согласен с условиями\n                <span className=\"required-star\"> *</span>\n              </label>\n            </Form.Item>\n          </div>\n\n          <div className=\"formButtonsContainer\">\n            <SubmitButton loading={loading} disabled={false} size=\"large\" className=\"button\">\n              Зарегистрироваться\n            </SubmitButton>\n            <ResetButton size=\"large\" className=\"button\">\n              Очистить форму\n            </ResetButton>\n          </div>\n          <span className=\"success\">{successMessage}</span>\n          <span className=\"error\">{netErrorMessage}</span>\n        </Form>\n      </Formik>\n    );\n  }\n}\n\nexport default SubmitForm;\n","import React from 'react';\nimport Form from '../form/form';\n\nimport './app.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <h2>Форма регистрации</h2>\n    <Form />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}